<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping
    PUBLIC "-//Hibernate/Hibernate Mapping DTD//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping>

  <class 
      name="org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl"
      table="MFR_MESSAGE_T" 
      optimistic-lock="version" 
      discriminator-value="ME">
    
    <!-- Inherited fields from MutableEntity -->
    <id name="id">
      <column name="ID" not-null="true" length="19" />
      <generator class="native">
        <param name="sequence">MFR_MESSAGE_S</param>
      </generator>
    </id>

	<!--  Discriminator field used for polymophism in the database -->
    <discriminator>
      <column name="MESSAGE_DTYPE" length="2" index="MFR_MESSAGE_DTYPE_I"/>
    </discriminator>
       
	<!--  Version number used for optimistic locking -->
    <version name="version" column="VERSION" />

    <property name="uuid" column="UUID" length="36" not-null="true" />
    <property name="created" column="CREATED" not-null="true" index="MFR_MESSAGE_CREATED_I"/>
    <property name="createdBy" column="CREATED_BY" length="36" not-null="true" />
    <property name="modified" column="MODIFIED" not-null="true" />
    <property name="modifiedBy" column="MODIFIED_BY" length="36" not-null="true" />

    <!-- Message fields -->
    <property name="title">
      <column name="TITLE" length="255" not-null="true" index="MFR_MESSAGE_TITLE_I"/>
    </property>
    <property name="body" type="text">
      <column name="BODY" not-null="false" />
    </property>
    <property name="author">
      <column name="AUTHOR" length="255" not-null="true" index="MFR_MESSAGE_AUTHOR_I" />
    </property>
    <property name="hasAttachments">
      <column name="HAS_ATTACHMENTS" not-null="true" index="MFR_MESSAGE_HAS_ATTACHMENTS_I"/>
    </property>
    <property name="gradeComment" type="text">
      <column name="GRADECOMMENT" not-null="false" />
    </property>
	<property name="gradeAssignmentName" column="GRADEASSIGNMENTNAME" type="string" not-null="false"/>
    
    <set name="attachmentsSet" lazy="true" order-by="created desc" cascade="all-delete-orphan">
        <key column="m_surrogateKey"/>                        
        <one-to-many class="org.sakaiproject.component.app.messageforums.dao.hibernate.AttachmentImpl"/>            
    </set>
  	<!-- 
  	<list name="attachments" lazy="true" table="MFR_ATTACHMENT_T" cascade="all">
		<key column="m_surrogateKey"/>
		<index column="mes_index_col" />
		<one-to-many class="org.sakaiproject.component.app.messageforums.dao.hibernate.AttachmentImpl" />
	</list> 
	-->   
    <property name="label">
      <column name="LABEL" length="255" not-null="false" index="MFR_MESSAGE_LABEL_I" />
    </property>
    <many-to-one name="inReplyTo" column="IN_REPLY_TO"
      class="org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl"
      not-null="false" cascade="none" />        
    <property name="gradebook">
      <column name="GRADEBOOK" length="255" not-null="false" />
    </property>    
    <property name="gradebookAssignment">
      <column name="GRADEBOOK_ASSIGNMENT" length="255" not-null="false" />
    </property>
    <property name="typeUuid">
      <column name="TYPE_UUID" length="36" not-null="true" />
    </property>
    <property name="approved">
      <column name="APPROVED" not-null="false" />
    </property>
    <property name="draft">
      <column name="DRAFT" not-null="true" />
    </property>
 	<!-- added implementing delete from threaded view -->
	<property name="deleted">
		<column name="DELETED" not-null="true" />
	</property> 
	
    
    <many-to-one name="topic" column="surrogateKey"
      class="org.sakaiproject.component.app.messageforums.dao.hibernate.TopicImpl"
      not-null="false" index="MFR_MESSAGE_PARENT_TOPIC_I" cascade="none" />
     <!-- <property name="tindex" column="t_index_col" type="int" update="true" insert="true"/> -->
        
    <!-- PrivateMessage fields -->
    <subclass 
      name="org.sakaiproject.component.app.messageforums.dao.hibernate.PrivateMessageImpl"
      discriminator-value="PM">
      <!-- enable list if joining with forum user -->
	  <!-- <list name="recipients" lazy="true" table="MFR_MESSAGE_FORUMS_USER_MSG_T" cascade="all">	  
	      <key column="messageSurrogateKey"/>
	      <index column="user_index_col" />
	      <many-to-many class="org.sakaiproject.component.app.messageforums.dao.hibernate.MessageForumsUserImpl"
	                    column="userSurrogateKey"/>
  	  </list>         
  	  -->
  	  <list name="recipients" lazy="true" table="MFR_PVT_MSG_USR_T" cascade="all">
  	    <key column="messageSurrogateKey"/>
  	    <index column="user_index_col"/>
  	    <composite-element class="org.sakaiproject.component.app.messageforums.dao.hibernate.PrivateMessageRecipientImpl">
          <property name="userId" >
            <column name="USER_ID" not-null="true" index="MFR_PVT_MSG_USR_I1"/>                        
          </property>
          <property name="typeUuid">
            <column name="TYPE_UUID" not-null="true" index="MFR_PVT_MSG_USR_I1"/>
          </property>
          <property name="contextId">
            <column name="CONTEXT_ID" not-null="true" index="MFR_PVT_MSG_USR_I1"/>
          </property>
          <property name="read">
            <column name="READ_STATUS" not-null="true" index="MFR_PVT_MSG_USR_I1"/>
          </property>
  	    </composite-element>  	      	    
  	  </list>
  	  
      <property name="externalEmail">
        <column name="EXTERNAL_EMAIL" not-null="false" />
      </property>        
      <property name="externalEmailAddress">
        <column name="EXTERNAL_EMAIL_ADDRESS" length="255" not-null="false" />
      </property>
      <property name="recipientsAsText" type="text" not-null="false" >
        <column name="RECIPIENTS_AS_TEXT"/>
      </property>      
    </subclass>
    
  </class>

  <query name="findMessageById">
    <![CDATA[from org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl as message where message.id = :id]]>
  </query>
  
  <query name="findMessageByIdWithAttachments">
    <![CDATA[from org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl message
             left join fetch message.attachmentsSet
             where message.id = :id]]>
  </query>

  <query name="findMessageByUuid">
    <![CDATA[from org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl as message where message.uuid = :uuid]]>
  </query>
  
  <query name="findMessageCountByTopicId">
    <![CDATA[select count(*) from org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl as message where message.topic.id = :topicId and message.draft = false and message.deleted=false]]>
  </query>
  
  <query name="findViewableMessageCountByTopicIdByUserId">
    <![CDATA[select count(*) from org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl as message 
    				where message.topic.id = :topicId and 
    				message.draft = false and
    				message.deleted = false and
    				(message.approved = true or
    				message.createdBy = :userId) 
    ]]>
  </query>

  <query name="findReadMessageCountByTopicId">
    <![CDATA[select count(*) from org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl as message, org.sakaiproject.component.app.messageforums.dao.hibernate.UnreadStatusImpl as us where message.topic.id = :topicId and us.userId = :userId and message.id = us.messageId and us.read = true and message.draft = false and message.deleted = false]]>
  </query>
  
  <query name="findReadViewableMessageCountByTopicIdByUserId">
    <![CDATA[select count(*) from org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl as message,
    				 org.sakaiproject.component.app.messageforums.dao.hibernate.UnreadStatusImpl as us 
    				 where message.topic.id = :topicId and 
    				 us.userId = :userId and 
    				 message.id = us.messageId and 
    				 us.read = true and 
    				 message.draft = false and 
    				 message.deleted = false and
    				 (message.approved = true or
    				 message.createdBy = :userId)]]>
  </query>
  
  <query name="findAuhtoredMessageCountByTopicId">
  	<![CDATA[select count(*) from org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl as message where message.topic.id = :topicId and message.draft = false and message.deleted = false and message.createdBy = :userId]]>
  </query>

  <query name="findMessagesByTopicId">
    <![CDATA[from org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl as message where message.topic.id = :topicId]]>
  </query>
  
  <!-- 
  <query name="findPvtMsgCntByTopicTypeUser">
    <![CDATA[select count(*) 
             from org.sakaiproject.component.app.messageforums.dao.hibernate.PrivateMessageImpl as message             
             left join message.recipients recipient
             where recipient.userId = :userId and
                   recipient.typeUuid = :typeUuid and
                   recipient.contextId = :contextId

    ]]>
  </query>
  
  <query name="findUnreadPvtMsgCntByTopicTypeUser">
    <![CDATA[select count(*) 
             from org.sakaiproject.component.app.messageforums.dao.hibernate.PrivateMessageImpl as message
             left join message.recipients recipient
             where recipient.userId = :userId and
                   recipient.typeUuid = :typeUuid and
                   recipient.contextId = :contextId and
                   recipient.read = false               
    ]]>
  </query>
  -->
  
  <!-- ================ Gets count of all unread private messages ================= -->
  <!--  NOTE: do not need site list since private message read status table only has entries for sites user is a part of -->
  
  <query name="findUnreadPvtMsgCntByUserForAllSites">
    <![CDATA[select recipient.contextId, count(*) 
             from org.sakaiproject.component.app.messageforums.dao.hibernate.PrivateMessageImpl as message
             left join message.recipients recipient
             where recipient.userId = :userId and
                   recipient.read = false and
                   message.draft = false and
                   message.deleted = false
             group by recipient.contextId
    ]]>
  </query>

   <query name="findDiscussionForumMessageCountsForAllSites">
    <![CDATA[select a.contextId, count(*)
    		 from org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl as messages
    		 join messages.topic as topic
             join topic.openForum as f
             join f.area as a
             where a.contextId in ( :siteList ) and
             f.draft = false and
             topic.draft = false and
             messages.draft = false and
             messages.deleted = false
             group by a.contextId
    ]]>
 
 </query>

<!--  Added 11-9-06 to filter out topics that are hidden for this user (role) -->
<query name="findDiscussionForumMessageRemoveCountsForAllSites"> 
    <![CDATA[select a.contextId, membershipItem.name, count(*)
    		 from org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl as messages,
    		 org.sakaiproject.component.app.messageforums.dao.hibernate.PermissionLevelImpl as pl
    		 		 join messages.topic as topic
    		 		 join topic.membershipItemSet as membershipItem
             join topic.openForum as f
             join f.area as a
             where a.contextId in ( :siteList ) and
             membershipItem.name in ( :roleList ) and
             ((pl.typeUuid != '00000000-0000-0000-7777-000000000000' and 
               pl.name = membershipItem.permissionLevelName) or
              membershipItem.permissionLevel = pl.id) and
             (pl.read = false or
             (pl.moderatePostings = false and
               ((messages.approved = null or
                messages.approved = false) and
                messages.createdBy != :userId)))
             group by a.contextId, membershipItem.name
    ]]>
    
 </query>

<query name="findDiscussionForumReadMessageCountsForAllSites">
    <![CDATA[select a.contextId, count(*)
    		 from org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl as messages,
    		 org.sakaiproject.component.app.messageforums.dao.hibernate.UnreadStatusImpl as us
    		 join messages.topic as topic
             join topic.openForum as f
             join f.area as a
             where us.userId = :userId and
             messages.id = us.messageId and
             messages.deleted = false and
             f.draft = false and
             topic.draft = false
             group by a.contextId
    ]]>
    
 </query>

<!--  Need this since the user might have unread messages before made private -->
<query name="findDiscussionForumReadMessageRemoveCountsForAllSites">
    <![CDATA[select a.contextId, membershipItem.name, count(*)
    		 from org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl as messages,
    		 org.sakaiproject.component.app.messageforums.dao.hibernate.UnreadStatusImpl as us,
    		 org.sakaiproject.component.app.messageforums.dao.hibernate.PermissionLevelImpl as pl
     		 		 join messages.topic as topic
     		 		 join topic.membershipItemSet as membershipItem
             join topic.openForum as f
             join f.area as a
             where us.userId = :userId and
             messages.id = us.messageId and
             messages.deleted = false and
             ((pl.typeUuid != '00000000-0000-0000-7777-000000000000' and 
               pl.name = membershipItem.permissionLevelName) or
              membershipItem.permissionLevel = pl.id) and
             (pl.read = false or
             (pl.moderatePostings = false and
               ((messages.approved = null or
                messages.approved = false) and
                messages.createdBy != :userId))) and
             membershipItem.name in ( :roleList )
             group by a.contextId, membershipItem.name
    ]]>
    
 </query>
<!--  -->
 <query name="findAggregatePvtMsgCntForUserInContext">
    <![CDATA[select recipient.read, recipient.typeUuid, count(*) 
             from org.sakaiproject.component.app.messageforums.dao.hibernate.PrivateMessageImpl as message
             left join message.recipients recipient
             where recipient.userId = :userId and                   
                   recipient.contextId = :contextId
             group by recipient.read, recipient.typeUuid
    ]]>
  </query>
  
  <query name="findPrvtMsgsByUserTypeContext">
    <![CDATA[from org.sakaiproject.component.app.messageforums.dao.hibernate.PrivateMessageImpl as message
             left join fetch message.recipients recipient
             where recipient.userId = :userId and
                   recipient.typeUuid = :typeUuid and                             
                   recipient.contextId = :contextId
    ]]>    
  </query>
  
  <query name="findPrivateMessageByIdWithRecipients">
    <![CDATA[from org.sakaiproject.component.app.messageforums.dao.hibernate.PrivateMessageImpl as message
             left join fetch message.recipients recipient
             where message.id = :id                        
    ]]>    
  </query>
  
  <query name="finalAllChildMessages">
    <![CDATA[from org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl as message
             where message.inReplyTo.id = :messageId
    ]]>    
  </query>
  
  <query name="findMessagesBySearchText">
    <![CDATA[from org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl as message
             where message.topic.id = :id and message.draft = false and (
                     message.author like :searchByText or 
                     message.title like :searchByText or
                     message.body like :searchByText
                   )
    ]]>    
  </query>

  <query name="findPvtMsgsBySearchText">
    <![CDATA[from org.sakaiproject.component.app.messageforums.dao.hibernate.PrivateMessageImpl as message
             left join fetch message.recipients recipient
             where  (
             				(((1 = :searchByAuthor and message.author like :searchText) )or 
                    ((1 = :searchByText and message.title like :searchText) )or
                    ((1 = :searchByBody and message.body like :searchText) )or
                    ((1 = :searchByLabel and message.label like :searchText) ))and
                    ((1 != :searchByDate or message.created between :searchFromDate and :searchToDate) ))
                    and recipient.typeUuid = :typeUuid
                    and recipient.userId = :userId
                    and recipient.contextId = :contextId
    ]]>    
  </query>

  <query name="findReadStatusByMsgIds">
    <![CDATA[from org.sakaiproject.component.app.messageforums.dao.hibernate.UnreadStatusImpl as us 
    		where 
    		us.userId = :userId and 
    		us.messageId in ( :msgIds )
    ]]>
  </query>
  <!-- permissions are a little nasty...  b/c permission level  is null in the membershipItem
  			if it is not custom, we need to	check for permission level that is custom and has same id 
  			or that is not custom and has the same permission level name -->
  <query name="findAllPendingMsgsByContextByMembership">
    <![CDATA[select message, topic, forum from org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl as message,
    					org.sakaiproject.component.app.messageforums.dao.hibernate.PermissionLevelImpl as pl
    				 join message.topic as topic
             join topic.openForum as forum
             join forum.area as area
             join topic.membershipItemSet as membershipItem   
             where area.contextId = :contextId and
             membershipItem.name in ( :membershipList ) and
             message.approved = null and
             ((pl.typeUuid != '00000000-0000-0000-7777-000000000000' and 
               pl.name = membershipItem.permissionLevelName) or
              membershipItem.permissionLevel = pl.id) and
             pl.moderatePostings = true
    ]]>    
  </query>
  
  <query name="findPendingMsgsByTopicId">
    <![CDATA[select message, topic, forum from org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl as message      
    				 join message.topic as topic
    				 join topic.openForum as forum    
             where topic.id = :topicId and
             topic.draft = false and
             forum.draft = false and
             message.approved = null
    ]]>    
  </query>
  
</hibernate-mapping>


