<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping
    PUBLIC "-//Hibernate/Hibernate Mapping DTD//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-2.0.dtd">

<hibernate-mapping>

  <class 
      name="org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl"
      table="MFR_MESSAGE_T" 
      optimistic-lock="version" 
      discriminator-value="ME">
    
    <!-- Inherited fields from MutableEntity -->
    <id name="id">
      <column name="ID" not-null="true" length="19" />
      <generator class="native">
        <param name="sequence">MFR_MESSAGE_S</param>
      </generator>
    </id>

	<!--  Discriminator field used for polymophism in the database -->
    <discriminator>
      <column name="MESSAGE_DTYPE" length="2" index="MFR_MESSAGE_DTYPE_I"/>
    </discriminator>
       
	<!--  Version number used for optimistic locking -->
    <version name="version" column="VERSION" />

    <property name="uuid" column="UUID" length="36" not-null="true" />
    <property name="created" column="CREATED" not-null="true" index="MFR_MESSAGE_CREATED_I"/>
    <property name="createdBy" column="CREATED_BY" length="36" not-null="true" />
    <property name="modified" column="MODIFIED" not-null="true" />
    <property name="modifiedBy" column="MODIFIED_BY" length="36" not-null="true" />

    <!-- Message fields -->
    <property name="title">
      <column name="TITLE" length="255" not-null="true" index="MFR_MESSAGE_TITLE_I"/>
    </property>
    <property name="body" type="text">
      <column name="BODY" not-null="false" />
    </property>
    <property name="author">
      <column name="AUTHOR" length="255" not-null="true" index="MFR_MESSAGE_AUTHOR_I" />
    </property>
    <property name="hasAttachments">
      <column name="HAS_ATTACHMENTS" not-null="true" index="MFR_MESSAGE_HAS_ATTACHMENTS_I"/>
    </property>
    
    <set name="attachmentsSet" lazy="true" order-by="created desc" cascade="all-delete-orphan">
        <key column="m_surrogateKey"/>                        
        <one-to-many class="org.sakaiproject.component.app.messageforums.dao.hibernate.AttachmentImpl"/>            
    </set>
  	<!-- 
  	<list name="attachments" lazy="true" table="MFR_ATTACHMENT_T" cascade="all">
		<key column="m_surrogateKey"/>
		<index column="mes_index_col" />
		<one-to-many class="org.sakaiproject.component.app.messageforums.dao.hibernate.AttachmentImpl" />
	</list> 
	-->   
    <property name="label">
      <column name="LABEL" length="255" not-null="false" index="MFR_MESSAGE_LABEL_I" />
    </property>
    <many-to-one name="inReplyTo" column="IN_REPLY_TO"
      class="org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl"
      not-null="false" cascade="none" />        
    <property name="gradebook">
      <column name="GRADEBOOK" length="255" not-null="false" />
    </property>    
    <property name="gradebookAssignment">
      <column name="GRADEBOOK_ASSIGNMENT" length="255" not-null="false" />
    </property>
    <property name="typeUuid">
      <column name="TYPE_UUID" length="36" not-null="true" />
    </property>
    <property name="approved">
      <column name="APPROVED" not-null="true" />
    </property>
    <property name="draft">
      <column name="DRAFT" not-null="true" />
    </property>
    
    <many-to-one name="topic" column="surrogateKey"
      class="org.sakaiproject.component.app.messageforums.dao.hibernate.TopicImpl"
      not-null="false" index="MFR_MESSAGE_PARENT_TOPIC_I" cascade="none" />
     <!-- <property name="tindex" column="t_index_col" type="int" update="true" insert="true"/> -->
        
    <!-- PrivateMessage fields -->
    <subclass 
      name="org.sakaiproject.component.app.messageforums.dao.hibernate.PrivateMessageImpl"
      discriminator-value="PM">
      <!-- enable list if joining with forum user -->
	  <!-- <list name="recipients" lazy="true" table="MFR_MESSAGE_FORUMS_USER_MSG_T" cascade="all">	  
	      <key column="messageSurrogateKey"/>
	      <index column="user_index_col" />
	      <many-to-many class="org.sakaiproject.component.app.messageforums.dao.hibernate.MessageForumsUserImpl"
	                    column="userSurrogateKey"/>
  	  </list>         
  	  -->
  	  <list name="recipients" lazy="true" table="MFR_PVT_MSG_USR_T" cascade="all">
  	    <key column="messageSurrogateKey"/>
  	    <index column="user_index_col"/>
  	    <composite-element class="org.sakaiproject.component.app.messageforums.dao.hibernate.PrivateMessageRecipientImpl">
          <property name="userId" >
            <column name="USER_ID" not-null="true" index="MFR_PVT_MSG_USR_I1"/>                        
          </property>
          <property name="typeUuid">
            <column name="TYPE_UUID" not-null="true" index="MFR_PVT_MSG_USR_I1"/>
          </property>
          <property name="contextId">
            <column name="CONTEXT_ID" not-null="true" index="MFR_PVT_MSG_USR_I1"/>
          </property>
          <property name="read">
            <column name="READ_STATUS" not-null="true" index="MFR_PVT_MSG_USR_I1"/>
          </property>
  	    </composite-element>  	      	    
  	  </list>
  	  
      <property name="externalEmail">
        <column name="EXTERNAL_EMAIL" not-null="false" />
      </property>        
      <property name="externalEmailAddress">
        <column name="EXTERNAL_EMAIL_ADDRESS" length="255" not-null="false" />
      </property>
      <property name="recipientsAsText" type="text" not-null="false" >
        <column name="RECIPIENTS_AS_TEXT"/>
      </property>      
    </subclass>
    
  </class>

  <query name="findMessageById">
    <![CDATA[from org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl as message where message.id = :id]]>
  </query>
  
  <query name="findMessageByIdWithAttachments">
    <![CDATA[from org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl message
             left join fetch message.attachmentsSet
             where message.id = :id]]>
  </query>

  <query name="findMessageByUuid">
    <![CDATA[from org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl as message where message.uuid = :uuid]]>
  </query>
  
  <query name="findMessageCountByTopicId">
    <![CDATA[select count(*) from org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl as message where message.topic.id = :topicId and message.draft = false]]>
  </query>

  <query name="findReadMessageCountByTopicId">
    <![CDATA[select count(*) from org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl as message, org.sakaiproject.component.app.messageforums.dao.hibernate.UnreadStatusImpl as us where message.topic.id = :topicId and us.userId = :userId and message.id = us.messageId and us.read = true and message.draft = false]]>
  </query>

  <query name="findMessagesByTopicId">
    <![CDATA[from org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl as message where message.topic.id = :topicId]]>
  </query>
  
  <!-- 
  <query name="findPvtMsgCntByTopicTypeUser">
    <![CDATA[select count(*) 
             from org.sakaiproject.component.app.messageforums.dao.hibernate.PrivateMessageImpl as message             
             left join message.recipients recipient
             where recipient.userId = :userId and
                   recipient.typeUuid = :typeUuid and
                   recipient.contextId = :contextId

    ]]>
  </query>
  
  <query name="findUnreadPvtMsgCntByTopicTypeUser">
    <![CDATA[select count(*) 
             from org.sakaiproject.component.app.messageforums.dao.hibernate.PrivateMessageImpl as message
             left join message.recipients recipient
             where recipient.userId = :userId and
                   recipient.typeUuid = :typeUuid and
                   recipient.contextId = :contextId and
                   recipient.read = false               
    ]]>
  </query>
  -->
  
  <query name="findAggregatePvtMsgCntForUserInContext">
    <![CDATA[select recipient.read, recipient.typeUuid, count(*) 
             from org.sakaiproject.component.app.messageforums.dao.hibernate.PrivateMessageImpl as message
             left join message.recipients recipient
             where recipient.userId = :userId and                   
                   recipient.contextId = :contextId
             group by recipient.read, recipient.typeUuid
    ]]>
  </query>
  
  
  
  <query name="findPrvtMsgsByUserTypeContext">
    <![CDATA[from org.sakaiproject.component.app.messageforums.dao.hibernate.PrivateMessageImpl as message
             left join fetch message.recipients recipient
             where recipient.userId = :userId and
                   recipient.typeUuid = :typeUuid and                             
                   recipient.contextId = :contextId
    ]]>    
  </query>
  
  <query name="findPrivateMessageByIdWithRecipients">
    <![CDATA[from org.sakaiproject.component.app.messageforums.dao.hibernate.PrivateMessageImpl as message
             left join fetch message.recipients recipient
             where message.id = :id                        
    ]]>    
  </query>
  
  <query name="finalAllChildMessages">
    <![CDATA[from org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl as message
             where message.inReplyTo.id = :messageId
    ]]>    
  </query>
  
  <query name="findMessagesBySearchText">
    <![CDATA[from org.sakaiproject.component.app.messageforums.dao.hibernate.MessageImpl as message
             where message.topic.id = :id and message.draft = false and (
                     message.author like :searchByText or 
                     message.title like :searchByText or
                     message.body like :searchByText
                   )
    ]]>    
  </query>

  <query name="findPvtMsgsBySearchText">
    <![CDATA[from org.sakaiproject.component.app.messageforums.dao.hibernate.PrivateMessageImpl as message
             left join fetch message.recipients recipient
             where  ((1 = :searchByAuthor and message.author like :searchText) or 
                    (1 = :searchByText and message.title like :searchText) or
                    (1 = :searchByBody and message.body like :searchText) or
                    (1 = :searchByLabel and message.label like :searchText) or
                    (1 = :searchByDate and message.created between :searchFromDate and :searchToDate))
                    and recipient.typeUuid = :typeUuid
                    and recipient.userId = :userId
                    and recipient.contextId = :contextId
    ]]>    
  </query>
      

</hibernate-mapping>


